name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.6", "3.7", "3.8"]

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: latest
          python-version: ${{ matrix.python-version }}
          environment-file: continuous_integration/environment-${{ matrix.python-version }}.yaml
          activate-environment: dask-distributed
          auto-activate-base: false

      - name: Install stacktrace
        shell: bash -l {0}
        # stacktrace for Python 3.8 has not been released at the moment of writing
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version < '3.8' }}
        run: conda install -c conda-forge -c defaults -c numba libunwind stacktrace

      - name: Cythonize
        shell: bash -l {0}
        if: ${{ matrix.python-version == '3.7' }}
        run: python setup.py build_ext --with-cython

      - name: Install
        shell: bash -l {0}
        run: python -m pip install --no-deps -e .

      - name: conda list
        shell: bash -l {0}
        run: conda list

      - name: conda env export
        shell: bash -l {0}
        run: |
          echo -e "--\n--Conda Environment (re-create this with \`conda env create --name <name> -f <output_file>\`)\n--"
          conda env export | grep -E -v '^prefix:.*$'

      # Keep this aligned to the same step in ssh_debug.yaml
      - name: Setup SSH
        shell: bash -l {0}
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~ ~/.ssh
          ssh-keygen -t rsa -f ~/.ssh/id_rsa -N "" -q
          cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
          ssh-keyscan -H localhost 127.0.0.1 $(hostname) >> ~/.ssh/known_hosts

      - name: Test
        shell: bash -l {0}
        env:
          PYTHONFAULTHANDLER: 1
          MARKERS: not avoid_ci
        run: |
          if [[ "${{ matrix.os }}" = "ubuntu-latest" ]]; then
              # FIXME ipv6 trouble on Ubuntu github actions CI, which causes tests to
              # fail, e.g. distributed/cli/tests/test_dask_scheduler.py::test_defaults
              # TODO github ref.
              export DISABLE_IPV6=1
          elif [[ "${{ matrix.os }}" = "windows-latest" ]]; then
              # FIXME no SSH available on Windows
              # https://github.com/dask/distributed/issues/4509
              export MARKERS="$MARKERS and not ssh"
          fi

          source continuous_integration/scripts/set_ulimit.sh
          # coverage run -m pytest distributed -m "$MARKERS" --runslow
          pytest distributed -m "$MARKERS" --runslow

      # - name: Coverage
      #   shell: bash -l {0}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     coverage report
      #     coveralls

      # - name: Debug with tmate on failure
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
